{"version":3,"sources":["api.ts","atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","routes/Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinHistory","coinId","endDate","Math","floor","Date","now","startDate","isDarkAtom","atom","key","default","Chart","isDark","useRecoilValue","useQuery","isLoading","data","type","series","name","map","price","close","options","theme","mode","chart","height","width","toolbar","show","background","yaxis","labels","xaxis","axisBorder","axisTicks","categories","time_close","slice","grid","stroke","curve","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed","Price","refetchInterval","x","open","high","low","enabled","Container","styled","div","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","span","props","isActive","accentColor","textColor","Title","h1","Loader","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","Helmet","to","rank","symbol","quotes","USD","description","total_supply","max_supply","path","CoinsList","ul","li","cardBgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","coin","pathname","id","src","toLowerCase","alt","Router","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.eb3bd131.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json()\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  // Date.now()는 밀리세컨트를 제공\n  // 1000으로 나누어서 second로 변환\n  const endDate = Math.floor(Date.now() / 1000);\n  // 2주일전의 second를 구함.\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`\n  ).then((response) => response.json());\n}\n","import { atom } from 'recoil';\n\nexport const isDarkAtom = atom({\n  key: 'isDark',\n  default: true,\n});\n","import { useQuery } from 'react-query';\nimport { fetchCoinHistory } from '../api';\nimport ApexChart from 'react-apexcharts';\nimport { useRecoilValue } from 'recoil';\nimport { isDarkAtom } from '../atoms';\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface ChartProps {\n  coinId: string;\n}\nfunction Chart({ coinId }: ChartProps) {\n  const isDark = useRecoilValue(isDarkAtom);\n  const { isLoading, data } = useQuery<IHistorical[]>(['ohlcv', coinId], () =>\n    fetchCoinHistory(coinId)\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ApexChart\n          type=\"line\"\n          series={[\n            {\n              name: 'price',\n              data: data?.map((price) => price.close),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: isDark ? 'dark' : 'light',\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: 'transparent',\n            },\n            yaxis: { labels: { show: false } },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              type: 'datetime',\n              categories: data?.map((price) => price.time_close.slice(5, 10)),\n            },\n            grid: { show: false },\n            stroke: {\n              curve: 'smooth',\n              width: 4,\n            },\n            fill: {\n              type: 'gradient',\n              gradient: { gradientToColors: ['#0be881'], stops: [0, 100] },\n            },\n            colors: ['#0fbcf9'],\n            tooltip: {\n              y: {\n                formatter: (value) => `$ ${value.toFixed(2)}`,\n              },\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import { useQuery } from 'react-query';\nimport { fetchCoinHistory } from '../api';\nimport ApexChart from 'react-apexcharts';\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\ninterface PriceProps {\n  coinId: string;\n}\n\nfunction Price({ coinId }: PriceProps) {\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    ['ohlcvp', coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    }\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        'Loading chart...'\n      ) : (\n        <ApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              name: 'price',\n              data: data?.map((price) => {\n                const date = price.time_close;\n                const open = price.open;\n                const high = price.high;\n                const low = price.low;\n                const close = price.close;\n                return { x: date, y: [open, high, low, close] };\n              }),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: 'dark',\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              toolbar: {\n                show: false,\n              },\n              background: 'transparent',\n            },\n            yaxis: {\n              labels: {\n                formatter: (value) => `${value.toFixed(2)}`,\n              },\n              tooltip: {\n                enabled: true,\n              },\n            },\n            xaxis: {\n              axisBorder: { show: false },\n              axisTicks: { show: false },\n              type: 'datetime',\n              categories: data?.map((price) => price.time_close.slice(5, 10)),\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Price;\n","import { Helmet } from 'react-helmet';\nimport { useQuery } from 'react-query';\nimport {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { fetchCoinInfo, fetchCoinTickers } from '../api';\nimport Chart from './Chart';\nimport Price from './Price';\n\nconst Container = styled.div`\n  padding: 0px 20px;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  a {\n    margin-right: auto;\n    font-size: 30px;\n  }\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 33%;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\n\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 7px 0px;\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    padding: 7px 0px;\n    display: block;\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n  margin-right: auto;\n`;\n\nconst Loader = styled.span`\n  display: block;\n  text-align: center;\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\n\ninterface RouteState {\n  name: string;\n}\n\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\nfunction Coin() {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  const priceMatch = useRouteMatch('/crypto-coin-tracker/:coinId/price');\n  const chartMatch = useRouteMatch('/crypto-coin-tracker/:coinId/chart');\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    ['info', coinId],\n    () => fetchCoinInfo(coinId),\n    {\n      refetchInterval: 5000,\n    }\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    ['tickers', coinId],\n    () => fetchCoinTickers(coinId)\n  );\n  const loading = infoLoading || tickersLoading;\n  // Helmet은 문서의 head로 가는 direct link임.\n  //\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? 'Loading...' : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Link to=\"/crypto-coin-tracker/\">⬅</Link>\n        <Title>\n          {state?.name ? state.name : loading ? 'Loading...' : infoData?.name}\n        </Title>\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/crypto-coin-tracker/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/crypto-coin-tracker/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Switch>\n            <Route path={`/crypto-coin-tracker/:coinId/price`}>\n              <Price coinId={coinId} />\n            </Route>\n            <Route path={`/crypto-coin-tracker/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\n\nexport default Coin;\n","import { Helmet } from 'react-helmet';\nimport { useQuery } from 'react-query';\nimport { Link } from 'react-router-dom';\nimport { useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { fetchCoins } from '../api';\nimport { isDarkAtom } from '../atoms';\n\nconst Container = styled.div`\n  padding: 0px 20px;\n`;\n\nconst Header = styled.header`\n  height: 10vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid white;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in-out;\n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  display: block;\n  text-align: center;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  // useQuery hook은 fetcher함수 fetchCoins를 부르고\n  //fetcher함수가 loading 중이라면 react query는 isLoading에 알려줌.\n  //fetcher함수가 끝난 값을 data에 넣어줄거임.\n  //react query는 데이터를 캐시에 저장.\n  const { isLoading, data } = useQuery<ICoin[]>('allCoins', fetchCoins);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>Toggle Mode</button>\n      </Header>\n      <CoinsList>\n        {isLoading ? (\n          <Loader>Loading...</Loader>\n        ) : (\n          data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/crypto-coin-tracker/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                  alt={coin.name}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))\n        )}\n      </CoinsList>\n    </Container>\n  );\n}\n\nexport default Coins;\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Coin from './Coin';\nimport Coins from './Coins';\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/crypto-coin-tracker/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/crypto-coin-tracker\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#2f3640',\n  textColor: 'white',\n  accentColor: '#9c88ff',\n  cardBgColor: 'transparent',\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: 'whitesmoke',\n  textColor: 'black',\n  accentColor: '#9c88ff',\n  cardBgColor: 'white',\n};\n","import { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport Router from './routes/Router';\n// 캐시에 있는 query를 볼 수 있음.\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport { darkTheme, lightTheme } from './theme';\nimport { isDarkAtom } from './atoms';\nimport { useRecoilValue } from 'recoil';\n\n// 전체 도큐먼트에 스타일 적용.\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n\tfont-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n\tline-height: 1.2;\n}\na {\n  text-decoration: none;\n\tcolor:inherit;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router />\n        <ReactQueryDevtools initialIsOpen={true} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RecoilRoot } from 'recoil';\nimport App from './App';\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}